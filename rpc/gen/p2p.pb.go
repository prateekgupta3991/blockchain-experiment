// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: rpc/p2p.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DestinationNodeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid string `protobuf:"bytes,1,opt,name=nid,proto3" json:"nid,omitempty"`
}

func (x *DestinationNodeDetails) Reset() {
	*x = DestinationNodeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_p2p_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationNodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationNodeDetails) ProtoMessage() {}

func (x *DestinationNodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_p2p_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationNodeDetails.ProtoReflect.Descriptor instead.
func (*DestinationNodeDetails) Descriptor() ([]byte, []int) {
	return file_rpc_p2p_proto_rawDescGZIP(), []int{0}
}

func (x *DestinationNodeDetails) GetNid() string {
	if x != nil {
		return x.Nid
	}
	return ""
}

type KeyDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *KeyDetails) Reset() {
	*x = KeyDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_p2p_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDetails) ProtoMessage() {}

func (x *KeyDetails) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_p2p_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDetails.ProtoReflect.Descriptor instead.
func (*KeyDetails) Descriptor() ([]byte, []int) {
	return file_rpc_p2p_proto_rawDescGZIP(), []int{1}
}

func (x *KeyDetails) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type NodeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	M  int64  `protobuf:"varint,2,opt,name=m,proto3" json:"m,omitempty"`
}

func (x *NodeDetails) Reset() {
	*x = NodeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_p2p_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetails) ProtoMessage() {}

func (x *NodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_p2p_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetails.ProtoReflect.Descriptor instead.
func (*NodeDetails) Descriptor() ([]byte, []int) {
	return file_rpc_p2p_proto_rawDescGZIP(), []int{2}
}

func (x *NodeDetails) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NodeDetails) GetM() int64 {
	if x != nil {
		return x.M
	}
	return 0
}

type TableDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartVal int64 `protobuf:"varint,1,opt,name=StartVal,proto3" json:"StartVal,omitempty"`
	EndVal   int64 `protobuf:"varint,2,opt,name=EndVal,proto3" json:"EndVal,omitempty"`
	Succesor int64 `protobuf:"varint,3,opt,name=Succesor,proto3" json:"Succesor,omitempty"`
}

func (x *TableDetails) Reset() {
	*x = TableDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_p2p_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDetails) ProtoMessage() {}

func (x *TableDetails) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_p2p_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDetails.ProtoReflect.Descriptor instead.
func (*TableDetails) Descriptor() ([]byte, []int) {
	return file_rpc_p2p_proto_rawDescGZIP(), []int{3}
}

func (x *TableDetails) GetStartVal() int64 {
	if x != nil {
		return x.StartVal
	}
	return 0
}

func (x *TableDetails) GetEndVal() int64 {
	if x != nil {
		return x.EndVal
	}
	return 0
}

func (x *TableDetails) GetSuccesor() int64 {
	if x != nil {
		return x.Succesor
	}
	return 0
}

type NewNodeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid string                  `protobuf:"bytes,1,opt,name=nid,proto3" json:"nid,omitempty"`
	Ip  string                  `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Ft  map[int64]*TableDetails `protobuf:"bytes,3,rep,name=ft,proto3" json:"ft,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Kv  map[int64]int64         `protobuf:"bytes,4,rep,name=kv,proto3" json:"kv,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *NewNodeDetails) Reset() {
	*x = NewNodeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_p2p_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewNodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewNodeDetails) ProtoMessage() {}

func (x *NewNodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_p2p_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewNodeDetails.ProtoReflect.Descriptor instead.
func (*NewNodeDetails) Descriptor() ([]byte, []int) {
	return file_rpc_p2p_proto_rawDescGZIP(), []int{4}
}

func (x *NewNodeDetails) GetNid() string {
	if x != nil {
		return x.Nid
	}
	return ""
}

func (x *NewNodeDetails) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NewNodeDetails) GetFt() map[int64]*TableDetails {
	if x != nil {
		return x.Ft
	}
	return nil
}

func (x *NewNodeDetails) GetKv() map[int64]int64 {
	if x != nil {
		return x.Kv
	}
	return nil
}

var File_rpc_p2p_proto protoreflect.FileDescriptor

var file_rpc_p2p_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x32, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x72, 0x70, 0x63, 0x22, 0x2a, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x69, 0x64,
	0x22, 0x20, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x2b, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x6d, 0x22,
	0x5e, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x45,
	0x6e, 0x64, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x45, 0x6e, 0x64,
	0x56, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x6f, 0x72, 0x22,
	0x8d, 0x02, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6e, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x2b, 0x0a, 0x02, 0x66, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x46, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x66,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x6b, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x4b, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x6b, 0x76, 0x1a, 0x48,
	0x0a, 0x07, 0x46, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x35, 0x0a, 0x07, 0x4b, 0x76, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0xbc, 0x01, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x66,
	0x69, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x1b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x13, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x1a, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x77, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0d,
	0x5a, 0x0b, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x3b, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_p2p_proto_rawDescOnce sync.Once
	file_rpc_p2p_proto_rawDescData = file_rpc_p2p_proto_rawDesc
)

func file_rpc_p2p_proto_rawDescGZIP() []byte {
	file_rpc_p2p_proto_rawDescOnce.Do(func() {
		file_rpc_p2p_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_p2p_proto_rawDescData)
	})
	return file_rpc_p2p_proto_rawDescData
}

var file_rpc_p2p_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_rpc_p2p_proto_goTypes = []interface{}{
	(*DestinationNodeDetails)(nil), // 0: rpc.DestinationNodeDetails
	(*KeyDetails)(nil),             // 1: rpc.KeyDetails
	(*NodeDetails)(nil),            // 2: rpc.NodeDetails
	(*TableDetails)(nil),           // 3: rpc.TableDetails
	(*NewNodeDetails)(nil),         // 4: rpc.NewNodeDetails
	nil,                            // 5: rpc.NewNodeDetails.FtEntry
	nil,                            // 6: rpc.NewNodeDetails.KvEntry
}
var file_rpc_p2p_proto_depIdxs = []int32{
	5, // 0: rpc.NewNodeDetails.ft:type_name -> rpc.NewNodeDetails.FtEntry
	6, // 1: rpc.NewNodeDetails.kv:type_name -> rpc.NewNodeDetails.KvEntry
	3, // 2: rpc.NewNodeDetails.FtEntry.value:type_name -> rpc.TableDetails
	1, // 3: rpc.NodeOps.findDestNode:input_type -> rpc.KeyDetails
	2, // 4: rpc.NodeOps.insertNode:input_type -> rpc.NodeDetails
	2, // 5: rpc.NodeOps.insertNodes:input_type -> rpc.NodeDetails
	0, // 6: rpc.NodeOps.findDestNode:output_type -> rpc.DestinationNodeDetails
	4, // 7: rpc.NodeOps.insertNode:output_type -> rpc.NewNodeDetails
	4, // 8: rpc.NodeOps.insertNodes:output_type -> rpc.NewNodeDetails
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_rpc_p2p_proto_init() }
func file_rpc_p2p_proto_init() {
	if File_rpc_p2p_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_p2p_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationNodeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_p2p_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_p2p_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_p2p_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_p2p_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewNodeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_p2p_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_p2p_proto_goTypes,
		DependencyIndexes: file_rpc_p2p_proto_depIdxs,
		MessageInfos:      file_rpc_p2p_proto_msgTypes,
	}.Build()
	File_rpc_p2p_proto = out.File
	file_rpc_p2p_proto_rawDesc = nil
	file_rpc_p2p_proto_goTypes = nil
	file_rpc_p2p_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeOpsClient is the client API for NodeOps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeOpsClient interface {
	FindDestNode(ctx context.Context, in *KeyDetails, opts ...grpc.CallOption) (*DestinationNodeDetails, error)
	InsertNode(ctx context.Context, in *NodeDetails, opts ...grpc.CallOption) (*NewNodeDetails, error)
	InsertNodes(ctx context.Context, opts ...grpc.CallOption) (NodeOps_InsertNodesClient, error)
}

type nodeOpsClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeOpsClient(cc grpc.ClientConnInterface) NodeOpsClient {
	return &nodeOpsClient{cc}
}

func (c *nodeOpsClient) FindDestNode(ctx context.Context, in *KeyDetails, opts ...grpc.CallOption) (*DestinationNodeDetails, error) {
	out := new(DestinationNodeDetails)
	err := c.cc.Invoke(ctx, "/rpc.NodeOps/findDestNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeOpsClient) InsertNode(ctx context.Context, in *NodeDetails, opts ...grpc.CallOption) (*NewNodeDetails, error) {
	out := new(NewNodeDetails)
	err := c.cc.Invoke(ctx, "/rpc.NodeOps/insertNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeOpsClient) InsertNodes(ctx context.Context, opts ...grpc.CallOption) (NodeOps_InsertNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeOps_serviceDesc.Streams[0], "/rpc.NodeOps/insertNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeOpsInsertNodesClient{stream}
	return x, nil
}

type NodeOps_InsertNodesClient interface {
	Send(*NodeDetails) error
	Recv() (*NewNodeDetails, error)
	grpc.ClientStream
}

type nodeOpsInsertNodesClient struct {
	grpc.ClientStream
}

func (x *nodeOpsInsertNodesClient) Send(m *NodeDetails) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeOpsInsertNodesClient) Recv() (*NewNodeDetails, error) {
	m := new(NewNodeDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeOpsServer is the server API for NodeOps service.
type NodeOpsServer interface {
	FindDestNode(context.Context, *KeyDetails) (*DestinationNodeDetails, error)
	InsertNode(context.Context, *NodeDetails) (*NewNodeDetails, error)
	InsertNodes(NodeOps_InsertNodesServer) error
}

// UnimplementedNodeOpsServer can be embedded to have forward compatible implementations.
type UnimplementedNodeOpsServer struct {
}

func (*UnimplementedNodeOpsServer) FindDestNode(context.Context, *KeyDetails) (*DestinationNodeDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDestNode not implemented")
}
func (*UnimplementedNodeOpsServer) InsertNode(context.Context, *NodeDetails) (*NewNodeDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertNode not implemented")
}
func (*UnimplementedNodeOpsServer) InsertNodes(NodeOps_InsertNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertNodes not implemented")
}

func RegisterNodeOpsServer(s *grpc.Server, srv NodeOpsServer) {
	s.RegisterService(&_NodeOps_serviceDesc, srv)
}

func _NodeOps_FindDestNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeOpsServer).FindDestNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeOps/FindDestNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeOpsServer).FindDestNode(ctx, req.(*KeyDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeOps_InsertNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeOpsServer).InsertNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeOps/InsertNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeOpsServer).InsertNode(ctx, req.(*NodeDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeOps_InsertNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeOpsServer).InsertNodes(&nodeOpsInsertNodesServer{stream})
}

type NodeOps_InsertNodesServer interface {
	Send(*NewNodeDetails) error
	Recv() (*NodeDetails, error)
	grpc.ServerStream
}

type nodeOpsInsertNodesServer struct {
	grpc.ServerStream
}

func (x *nodeOpsInsertNodesServer) Send(m *NewNodeDetails) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeOpsInsertNodesServer) Recv() (*NodeDetails, error) {
	m := new(NodeDetails)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NodeOps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NodeOps",
	HandlerType: (*NodeOpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findDestNode",
			Handler:    _NodeOps_FindDestNode_Handler,
		},
		{
			MethodName: "insertNode",
			Handler:    _NodeOps_InsertNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "insertNodes",
			Handler:       _NodeOps_InsertNodes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/p2p.proto",
}
